/**
\page masterclass-22-03 PLUMED Masterclass 22.3: OPES method

\authors Michele Invernizzi
\date Fabruary 28, 2022

\section masterclass-22-03-aims Aims

This Masterclass is an introduction to the \ref OPES method and its PLUMED implementation.

\section masterclass-22-03-obj Objectives

Once this Masterclass is completed, users will be able to:

- Perform OPES simulations and analyse the results.
- Use \ref OPES_EXPANDED to sample different generalized ensembles
- Test the effect of the various \ref OPES_METAD input options
- Understand the typical use-case for \ref OPES_METAD_EXPLORE

\section masterclass-22-03-prereq Prerequisites

We assume that you are familiar with PLUMED, metadynamics, umbrella sampling, and replica exchange.
If you are not, the 2021 PLUMED Masterclass is a great place to start.
In particular we suggest \ref masterclass-21-1, \ref masterclass-21-3, and \ref masterclass-21-4.

\section masterclass-22-03-theory Overview of the theory

The OPES method is an evolution of Metadynamics that also incorporates some of the ideas of the \ref VES method.
OPES is designed to be simple to use and robust with respect to suboptimal collective variables.
Compared to metadynamics, it is faster in converging to a quasi-static bias and it handles multi-dimensional collective variables more efficiently.

The theory for the OPES method is presented in three separate papers \cite Invernizzi2020rethinking \cite Invernizzi2021explore \cite Invernizzi2020unified.
A short overview can be found in the PLUMED documentation at \ref OPES, \ref OPES_EXPANDED, \ref OPES_METAD, and \ref OPES_METAD_EXPLORE.

\hidden{Summary of theory}

The OPES method aims at sampling a given target distribution over the configuration space, \f$p^{\text{tg}}(\mathbf{x})\f$,
different from the equilibrium Boltzmann distribution, \f$P(\mathbf{x})\propto e^{-\beta U(\mathbf{x})}\f$.
To do so, it iteratively builds a bias potential \f$V(\mathbf{x})\f$, by estimating on-the-fly the needed probability distributions:
\f[
  V(\mathbf{x}) = -\frac{1}{\beta}\log\frac{p^{\text{tg}}(\mathbf{x})}{P(\mathbf{x})}\, .
\f]
The bias quickly becomes quasi-static and the desired properties, such as the free energy, can be calculated with a simple reweighting.
For any given observable \f$O=O(\mathbf{x})\f$ one can write the expectation value as:
\f[
  \langle O \rangle_{P} = \frac{\langle O e^{\beta V}\rangle_{p^{\text{tg}}}}{\langle e^{\beta V}\rangle_{p^{\text{tg}}}}\, .
\f]

There are two ways to define an OPES target distribution, a metadynamics-like and a replica-exchange-like.
A replica-exchange-like target distribution is an expanded ensemble defined as a sum of overlapping probability distributions:
\f[
  p^{\text{tg}}_{\{\lambda\}}(\mathbf{x})=\frac{1}{N_{\{\lambda\}}}\sum_{\lambda} P_{\lambda}(\mathbf{x})\, .
\f]
A typical example is the temperature expanded ensemble, where each \f$ P_{\lambda}(\mathbf{x})\f$ is the same system, but at a different temperature.
This kind of target distribution can be defined via a set of expansion collective variables (ECVs).
The action \ref OPES_EXPANDED can be used to sample this kind of target distributions.

A metadynamics-like target distribution, is defined by its marginal over a set of collective variables (CVs), \f$\mathbf{s}=\mathbf{s}(\mathbf{x})\f$.
A typical choice for this marginal distribution is the well-tempered one:
\f[
  p^{\text{WT}}(\mathbf{s})=\left[P(\mathbf{s})\right]^{1/\gamma}\, ,
\f]
where \f$P(\mathbf{s})\f$ is the marginal over the CVs of the Boltzmann distribution, and \f$\gamma>1\f$ is the bias factor.
The well-tempered distribution is a smoother version of the original one, and in the limit of \f$\gamma=\infty\f$ it become a uniform distribution.
The actions \ref OPES_METAD and \ref OPES_METAD_EXPLORE can be used to sample this kind of target distributions.

\endhidden

\section masterclass-22-03-install Setting up the software 

For this Masterclass we will use GROMACS 2020.6 patched with PLUMED 2.8, with the OPES module and MPI enabled.
The easiest way to install all the software needed is to use a conda environment as described [here](https://github.com/plumed/masterclass-2022).

\section masterclass-22-03-resources Resources

The data needed to complete the exercises of this Masterclass can be found on [GitHub](https://github.com/invemichele/masterclass-22-03).
You can clone this repository locally on your machine with the usual command:

\verbatim
git clone https://github.com/invemichele/masterclass-22-03.git
\endverbatim

The repository contains all the data to run some short simulations, together with scripts to analyse them.
It also contains some annotated Jupyter notebooks, that will guide us through this tutorial. Most of the information can be found there, and this page is mainly meant as an overview of the content of the notebooks.
The notebooks will be updated with all the solutions after lecture II.

As done in some previous masterclass, we will play with a toy system, the small alanine dipeptide (ala2) molecule in vacuum.
It has the advantage of being a well-known system, cheap to simulate and with a higher level of complexity compared to a 2D model potential as the one used in this other \ref opes-metad.
Ala2 has two main metastable basins which can be identified by a very efficient collective variable (CV), the \f$\phi\f$ torsional angle.
Here is its free energy surface (FES) as a function of the \f$\phi\f$ and \f$\psi\f$ angles:

\image html masterclass-22-03-ala2_FES.png "Alanine dipeptide free energy surface."

\note All the exercises have been tested with PLUMED version 2.8.0 and GROMACS 2020.6

\section masterclass-22-03-ex-1 Exercise 1: Sampling expanded ensembles with OPES

\subsection masterclass-22-03-ex-1-1 1.1 Multithermal simulations

We start by using OPES to sample expanded ensembles.
This probably is not a familiar application of adaptive-bias enhanced sampling for most of PLUMED users.

The first example we consider is a multithermal simulation of alanine dipeptide. 
One can use replica exchange to perform a parallel tempering simulation and sample the two metastable states of alanine dipeptide, as explained for instance in \ref belfast-7.
Here instead, we want to sample the same multithermal distribution not by combining simulations at different temperatures, but by adding a bias potential to a single simulation.

We choose 3 temperatures \f$T_0, T_1, T_2\f$, ranging from 300 K to 1000 K, and setup our GROMACS simulation to run at \f$T_0=300\f$ K.
Our target distribution is then:
\f[
	p^{\text{tg}}(\mathbf{x})=\frac{1}{3}\left[\frac{e^{-\frac{1}{k_BT_0}U(\mathbf{x})}}{Z_0}+ \frac{e^{-\frac{1}{k_BT_1}U(\mathbf{x})}}{Z_1}+\frac{e^{-\frac{1}{k_BT_2}U(\mathbf{x})}}{Z_2}\right]
\f]
This can be rewritten highlighting \f$P(\mathbf{x})\f$
\f[
	p^{\text{tg}}(\mathbf{x})=P(\mathbf{x})\frac{1}{3}\left[1+ e^{-\left(\frac{1}{k_BT_1}-\frac{1}{k_BT_0}\right)U(\mathbf{x})}\frac{Z_0}{Z_1}+e^{-\left(\frac{1}{k_BT_2}-\frac{1}{k_BT_0}\right)U(\mathbf{x})}\frac{Z_0}{Z_2}\right]
\f]
and then using \f$\Delta F_i = -k_B T_0 \log \frac{Z_i}{Z_0}\f$:
\f[
	p^{\text{tg}}(\mathbf{x})=P(\mathbf{x})\frac{1}{3}\left[1+ e^{-\frac{1-T_0/T_1}{k_BT_0}U(\mathbf{x})+\frac{1}{k_BT_0}\Delta F_1}+e^{-\frac{1-T_0/T_2}{k_BT_0}U(\mathbf{x})+\frac{1}{k_BT_0}\Delta F_2}\right]
\f]
so we just need to know \f$\Delta F_1\f$ and \f$\Delta F_2\f$, and we can sample the target multithermal distribution by using the following bias:
\f[
  V(U) = - k_B T_0 \log \frac{1}{3}\left[1+ e^{-\frac{1-T_0/T_1}{k_BT_0}U(\mathbf{x})+\frac{1}{k_BT_0}\Delta F_1}+e^{-\frac{1-T_0/T_2}{k_BT_0}U(\mathbf{x})+\frac{1}{k_BT_0}\Delta F_2}\right]
\f]
that is a function only of the potential energy \f$U=U(\mathbf{x})\f$.
In the OPES spirit, we estimate on-the-fly these free energy differences using a simple reweighting, and iteratively reach the target distribution.

The final bias expression is determined by these quantities \f$\frac{1-T_0/T_i}{k_BT_0}U(\mathbf{x})\f$, that we call \ref expansion_cv (ECVs).
There are several types of expanded ensembles that might be of interest, and in order to sample them with OPES one simply needs to find the explicit form of the corresponding ECVs.

Enough equations, here is the plumed input file we need to run this multithermal simulation:

\plumedfile
ene: ENERGY
ecv: ECV_MULTITHERMAL ARG=ene TEMP_MIN=300 TEMP_MAX=1000 TEMP_STEPS=3
opes: OPES_EXPANDED ARG=ecv.ene PACE=500
\endplumedfile

We use the \ref OPES_EXPANDED bias action, with a multithermal expansion defined by the \ref ECV_MULTITHERMAL action.
The resulting bias is a function of the potential energy, and is updated every 500 MD steps.

In the notebook we show the shape of the resulting bias, how to check for convergence and how to reweight to estimate the free energy at different temperatures.
We also explain a simple automatic procedure that is used to automatically set a reasonable number of temperature steps if TEMP_STEPS is not provided.

\subsection masterclass-22-03-ex-1-2 1.2 Multiumbrella simulations

Next we present another expanded ensemble that can also be sampled by replica exchange.
We call it multiumbrella and it is composed by all the distributions sampled by a typical multiple windows umbrella sampling simulation.
In this kind of umbrella sampling one chooses a CV and runs several simulation each one with a parabolic bias potentials at a different CV location (see \ref masterclass-21-3).
We can use OPES to sample an expanded target distribution that is composed of all of these combined.
In multiple windows umbrella sampling, the free energy difference between the windows is estimated during postprocessing (e.g. with WHAM), in OPES this is done on-the-fly at simulation time.

The advantages of this is that choosing the number and location of the umbrellas becomes easier, and having a single longer simulation can also help with sampling orthogonal slow degrees of freedom.

We choose as CV the \f$\phi\f$ angle.
The ECVs we need for this type of expansion are the following:
\f[
  \Delta u_i = \frac{(\phi-\phi_i)^2}{2\sigma^2}\, ,
\f]
where \f$\phi_i\f$ are the fixed centers of the umbrellas and \f$\sigma\f$ determines their width.
Usually in umbrella sampling another parameter is used, \f$k=1/\sqrt{\sigma}\f$, but we will see in the notebook why we made a different choice.

The plumed input we will need might look like this:

\plumedfile
phi: TORSION ATOMS=5,7,9,15
ecv: ECV_UMBRELLAS_LINE ARG=phi CV_MIN=-pi CV_MAX=pi SIGMA=0.2
opes: OPES_EXPANDED ARG=ecv.phi PACE=500
\endplumedfile

This will place umbrellas uniformly along \f$\phi\f$, each one separated by a distance of one \f$\sigma\f$.
We can make them a less close to each with the keyword SPACING.
We can also provide a guess of the maximum free energy BARRIER we would like to overcome, this can help speed up convergence.

In the notebook we show what kind of sampling this input provides, and invite you to play around with the input, to get a sense of what each option does.
We also take the chance to see the effect on the FES of the bandwidth parameter used in the kernel density estimation when doing reweighting e.g. with the \ref histogram function.


\subsection masterclass-22-03-ex-1-3 1.3 Combined multithermal and multiumbrella simulations

Another advantage of using OPES to sample expanded ensembles is that it makes it very easy to combine them.
We want to show this by running a combined multithermal and multiumbrella simulation of alanine dipeptide.

Using the multithermal expansion we where able to sample both metastable states, but not very efficienly.
With the multiumbrella target distribution we have many transitions, but we sample only at 300 K.
By combining these two expansions we obtain the best of both, with frequent transitions and an efficient reweighting over a whole range of temperatures.

The drawback? We now might have to deal with hundreds of ECVs! 
However, while in a replica exchange scheme each ECV requires its own replica, with OPES we are free to stick with just one, or choose any number of multiple walkers.

The way we combine expansions is to create a grid with all possible combinations of temperature ECV and umbrella ECV, so if we have 10 ECVs for the temperature expansion and 20 for the multiumbrella one, we end up with 200 combined ECVs.
This will become more clear once we look at the notebook and the simulation output.

From the point of view of the plumed input things are quite straightforward.
For a combined multithermal-multiumbrella simulation it should look similar to this one:

\plumedfile
ene: ENERGY
ecv_mt: ECV_MULTITHERMAL ARG=ene TEMP_MIN=300 TEMP_MAX=1000
phi: TORSION ATOMS=5,7,9,15
ecv_mu: ECV_UMBRELLAS_LINE ARG=phi CV_MIN=-pi CV_MAX=pi SIGMA=0.2
opes: OPES_EXPANDED ARG=ecv_mt.ene,ecv_mu.phi PACE=500
\endplumedfile

To fully appreciate the strength of combining these two different expansions, one can run the same simulations but using the \f$\psi\f$ angle instead of \f$\phi\f$.

\subsection masterclass-22-03-ex-2 Exercise 2: OPES for metadynamics-like simulations

In this exercise we will setup and perform a well-tempered metadynamics run using the backbone dihedral \f$ \phi \f$
as collective variable. During the calculation, we will also monitor the behavior of the other backbone dihedral \f$ \psi \f$.
Here you can find a sample `plumed.dat` file that you can use as a template.

\plumedfile
# Activate MOLINFO functionalities
MOLINFO STRUCTURE=__FILL__
# Compute the backbone dihedral angle phi, defined by atoms C-N-CA-C
# you should use MOLINFO shortcuts 
phi: TORSION ATOMS=__FILL__
# Compute the backbone dihedral angle psi, defined by atoms N-CA-C-N
# here also you should to use MOLINFO shortcuts 
psi: TORSION ATOMS=__FILL__
# Activate well-tempered metadynamics in phi
metad: __FILL__ ARG=__FILL__ ...
# Deposit a Gaussian every 500 time steps, with initial height 
# equal to 1.2 kJ/mol and bias factor equal to 8
  PACE=500 HEIGHT=1.2 BIASFACTOR=8
# Gaussian width (sigma) should be chosen based on the CV fluctuations in unbiased run
# try 1/2 or 1/3 of the estimated fluctuations
  SIGMA=__FILL__
# Gaussians will be written to file and also stored on grid
  FILE=HILLS GRID_MIN=-pi GRID_MAX=pi
...
# Print both collective variables on COLVAR file every 10 steps
PRINT ARG=__FILL__ FILE=COLVAR STRIDE=__FILL__
\endplumedfile

Once your `plumed.dat` file is complete, you can run a 20 ns long metadynamics simulations starting from either of the two
provided conformations, for example `topolA.tpr`. All you need to do is execute the following command:

\verbatim
gmx mdrun -s topolA.tpr -nsteps 10000000 -plumed plumed.dat 
\endverbatim

During the metadynamics simulation, PLUMED will create two files, named `COLVAR` and `HILLS`.
The `COLVAR` file contains all the information specified by the \ref PRINT command, in this case
the value of the backbone dihedrals \f$ \phi \f$ and \f$ \psi \f$  every 10 steps of simulation.
The `HILLS` file contains a list of the Gaussian kernels deposited along the simulation.

Let's visualize the time series of the two collective variables. Take your time to inspect the behavior of the two CVs. 
<b>What are the main differences with respect to the trajectory produced in</b> \ref masterclass-22-03-ex-1 **?** 

At this point, we can estimate the free energy as a function of the metadynamics CV directly from the metadynamics
bias potential. In order to do so, the utility \ref sum_hills can be used to sum the Gaussian kernels
deposited during the simulation and stored in the `HILLS` file.  
To calculate the free energy as a function of \f$ \phi \f$, it is sufficient to use the following command line:

\verbatim
plumed sum_hills --hills HILLS
\endverbatim

The command above generates a file called `fes.dat` in which the free-energy surface as function
of \f$ \phi \f$ is calculated on a regular grid. One can modify the default name for the free-energy file,
as well as the boundaries and bin size of the grid, by using the following \ref sum_hills options:

\verbatim
--outfile - specify the outputfile for sumhills
--min - the lower bounds for the grid
--max - the upper bounds for the grid
--bin - the number of bins for the grid
--spacing - grid spacing, alternative to the number of bins
\endverbatim 

To give a preliminary assessment of the convergence of a metadynamics simulation, one can calculate the estimate of the free energy as a function
of simulation time. At convergence, the reconstructed profiles should be similar.
The \ref sum_hills option `--stride` should be used to give an estimate of the free energy every `N` Gaussian kernels deposited, and
the option `--mintozero` can be used to align the profiles by setting the global minimum to zero.
If we use the following command line:

\verbatim
plumed sum_hills --hills HILLS --stride 200 --mintozero
\endverbatim

one free energy is calculated every 200 Gaussian kernels deposited, and the global minimum is set to zero in all profiles.
Now, you can visualize the free-energy estimate as a function of simulation time and assess how it changed during the course
of the simulation. In the last part of this 20 ns long metadynamics simulation, the free-energy estimate should not change
significantly. 

Looking at the time-evolution of the entire free-energy profile might not be straightforward. Therefore, what
we usually do is focusing on a few metastable states, or local free-energy minima, and calculating their estimated
free-energy difference as a function of time. In case of alanine dipeptide, this is rather easy since there are only
two major states in the free-energy profile as a function of the CV \f$\phi\f$.

The users should now:
- calculate from the estimate of the free energy \f$F(\phi)\f$ at a given simulation time, the difference in free energy between the two basins.
In order to do this, you should define a reasonable interval around the two local free-energy minima and recall that the probability
of this state is the integral of the probability  \f$ P(\phi)= exp(-F(\phi)/k_BT) \f$ in the chosen interval;
- plot the estimated free-energy difference as a function of simulation time.

These two observations:
1. the system is diffusing rapidly in the entire CV space
2. the estimated free energy does not significantly change as a function of time

are two indications that the simulation __might__ have converged. 

\warning The two conditions listed above are necessary, but not sufficient to declare convergence. We will learn below how to
perform a quantitative analysis of the convergence of a metadynamics simulation.

 
\subsection masterclass-22-03-ex-6 Exercise 6: A 'real-life' application

In this last exercise, we will tackle a real-life biological problem: studying the conformational transition of a complex biological system.
The system that we are going to study is the C-terminal domain (CTD) of the RfaH virulence factor from _Escherichia coli_. This part of the system,
which we refer to as RfaH-CTD, undergoes a dramatic conformational transformation from β-barrel to α-helical, 
which is stabilized by the N-terminal domain of the RfaH virulence factor (see Fig. \ref masterclass-22-03-RfaH-CTD-fig).

\anchor masterclass-22-03-RfaH-CTD-fig 
\image html RfaH-CTD.png "Structural transformation of the RfaH-CTD. Domain dissociation is triggered upon binding of the NTD (gray) to its target ops (operon polarity suppressor) element DNA, relieving the autoinhibited state and allowing the transformation of the CTD (colored) from an α-helical hairpin (A) towards a five-stranded β-barrel (B). Note that the NTD and CTD are connected by a linker that does not order within the crystals and therefore is not shown in the figure."
 
In the `data/RfaH-CTD` folder of the `GitHub` repository of this Masterclass, you will find:
- two PDB files of RfaH-CTD in the α-helical and β-barrel states; 
- a `topol.tpr` file, which is needed to perform a MD simulation of this sytem with GROMACS.

The objective of this exercises are to:
1. compute the free-energy difference between the α-helical and β-barrel states of RfaH-CTD (with error estimate);
2. (optional) determine the structure and population of other metastable states, if present.

In order to complete the exercise, the students should:
- choose their own CVs (maximum 3) and perform a well-tempered metadynamics simulation. Any CV natively
implemented in PLUMED (see \ref colvarintro) or defined by the users directly in the input file (see \ref CUSTOM) can be used;
- monitor the \ref RMSD of the system from the two reference conformations during the course of the simulation;
- analyze the results as done in the previous exercises (assessment of convergence and error analysis);
- report the free energies (with error bar) as a function of the two \ref RMSD CVs calculated with respect to the reference PDBs;
- (optional) report structure and population of the most signicant, i.e. populated, states.

Please keep in mind that:
- we are simulating the system using a simplified, structure-based potential, called [SMOG](https://smog-server.org). SMOG is significantly
  less computational demanding than all-atoms, explicit solvent force fields. However, the simulation of this system might take a few hours,
  so allocate enough time to complete this exercise;
- some of the CVs or PLUMED functionalities might not work as hydrogen atoms are not present in the system. However, there
is always a way around this, so be creative;
- due to the nature of the force field, we are simulating at an unphysical temperature of 60K. Be ready to test large values of the `BIASFACTOR`.

Finally, due to the special nature of the force field, please execute GROMACS using the following command:

\verbatim
gmx mdrun -plumed plumed.dat -ntomp 4 -noddcheck
\endverbatim

You can adjust the number of CPU cores you want to use (here 4, OpenMP parallelization), based on the available resources. The system is not
particularly big, therefore using a large number of cores might be inefficient.

<b>Please post the results of your simulations on Slack!</b>

*/

link: @subpage masterclass-22-03 

description: This Masterclass shows how to use PLUMED to run and analyze OPES simulations 
